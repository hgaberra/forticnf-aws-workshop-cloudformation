{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v5.2) AWS CFT to deploy a standalone Instance into an existing VPC",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Nested Stack Name"
					},
					"Parameters": [
						"StackName"
					]
				},
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"Subnet"
					]
				},
				{
					"Label": {
						"default": "Instance Configuration"
					},
					"Parameters": [
						"InstanceType",
						"CIDRForInstanceAccess",
						"KeyPair",
						"EncryptVolumes",
						"PubliclyAvailable"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration"
					},
					"Parameters": [
						"InstanceIP"
					]
				}
			]
		}
	},
	"Parameters": {
		"StackName": {
			"Type": "String",
			"Description": "A unique stack name passed by the master template"
		},
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to use"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/8",
			"Description": "Provide a network CIDR for the VPC",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"Subnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to deploy the Instance into"
		},
		"InstanceIP": {
			"Type": "String",
			"Default": "10.0.1.10/24",
			"Description": "Provide the IP address in CIDR form for the Instance to use",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"PubliclyAvailable": {
			"Type": "String",
			"Default": "Yes",
			"Description": "Select if the Instance will have a EIP to be publicly available or not.  *** If you select No, then an S3 endpoint needs to be deployed and reachable from the subnet the Instance is in to successfully bootstrap.  Also, PAYG licensed instances require internet access to register with FortiCare successfully. ***",
			"AllowedValues": [
				"Yes",
				"No"
			]
		},
		"InstanceType": {
			"Type": "String",
			"Default": "m5.large",
			"Description": "Select the instance type for the Instance.  *** If using PAYG2Devices for LicenseType, you can only use up to a m5.xlarge ***",
			"AllowedValues": [
				"m5.large",
				"m5.xlarge",
				"m5.2xlarge",
				"m5.4xlarge",
				"m5.8xlarge",
				"m5.12xlarge",
				"m5.16xlarge",
				"m5.24xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the Instance instance will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the Instance"
		},
		"EncryptVolumes": {
			"Type": "String",
			"Default": "true",
			"Description": "Select 'true' to encrypt the Instance instances OS and Log volumes with your account's KMS default master key for EBS.  Otherwise select false to leave unencrypted",
			"AllowedValues": [
				"true",
				"false"
			]
		}
	},
	"Mappings": {
	},
	"Conditions": {
		"CreateEIP": {
			"Fn::Equals": [
				{
					"Ref": "PubliclyAvailable"
				},
				"Yes"
			]
		}
	},
	"Resources": {
		"InstanceSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "InstanceSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to Instance",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow 10.0.0.0/8 access to Instance",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": "10.0.0.0/8"
					},
					{
						"Description": "Allow 172.16.0.0/12 access to Instance",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": "172.16.0.0/12"
					},
					{
						"Description": "Allow 192.168.0.0/16 access to Instance",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": "192.168.0.0/16"
					}
				]
			}
		},
		"Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "8",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "InstanceEni0"
						},
						"DeviceIndex": "0"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Ref": "StackName"
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n",
							[
								"#!/bin/bash",
								{
									"Fn::Sub": " sudo bash /root/webpage.sh app1 ${StackName}"
								},
								"id=`curl 169.254.169.254/latest/meta-data/instance-id`",
								"sudo adduser $id",
								"echo $id:FORTInet123! | sudo chpasswd"
							]
						]
					}
				}
			}
		},
		"InstanceEni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "InstanceSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "Subnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "StackName"
									},
									"-Instance1eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "InstanceIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"InstanceEIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "CreateEIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"InstanceEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "CreateEIP",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"InstanceEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "InstanceEni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "InstanceIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": "InstanceEIP"
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "InlinePolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeImages"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"ImageFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"client = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = client.describe_images(",
								"            Filters=[{'Name': 'name', 'Values': [event['ResourceProperties']['LicenseType']]}],",
								"            Owners=['980933617837']",
								"        )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200 and resp['Images'] != []:",
								"        ami_dict = {}",
								"        ami_list = []",
								"        for entry in resp['Images']:",
								"            key = entry['CreationDate']",
								"            ami_dict[key] = entry['ImageId']",
								"        ami_list = sorted(ami_dict, reverse = True)",
								"        logger.info('--> found latest AMI: {}, {}'.format(ami_dict[ami_list[0]], ami_list[0]))",
								"        responseData = {'ami': ami_dict[ami_list[0]]}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to find AMI {} in describe_images response! {}'.format(event['ResourceProperties']['LicenseType'],resp))",
								"        responseData = {'msg':'Unable to find AMI {} in describe_images response! {}'.format(event['ResourceProperties']['LicenseType'],resp)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.9",
				"MemorySize": 128
			}
		},
		"RunImageFunction": {
			"Type": "Custom::ImageFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"ImageFunction",
						"Arn"
					]
				},
				"LicenseType": "ftnt-aws-iday-web"
			}
		}
	},
	"Outputs": {
		"InstanceID": {
			"Value": {
				"Ref": "Instance"
			},
			"Description": "Instance ID"
		},
		"Username": {
			"Value": "admin",
			"Description": "Username for the Instances"
		},
		"Password": {
			"Value": {
				"Ref": "Instance"
			},
			"Description": "Initial password for the Instance"
		},
		"InstanceLoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Fn::If": [
								"CreateEIP",
								{
									"Ref": "InstanceEIP"
								},
								{
									"Fn::GetAtt": [
										"InstanceEni0",
										"PrimaryPrivateIpAddress"
									]
								}
							]
						}
					]
				]
			},
			"Description": "Login URL for Instance"
		}
	}
}